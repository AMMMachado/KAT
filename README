
KAT - The K-mer Analysis Toolkit

A suite of tools that analyse jellyfish kmer hashes.  The following tools are currently available in KAT:

  - sect: SEquence Coverage estimator Tool.  Estimates the coverage of each sequence in a fasta file using kmers from a jellyfish hash
  - comp: Kmer comparison tool.  Creates a matrix of shared kmers between two jellyfish hashes.
  - gcp:  GC counting and kmer multiplicty comparison tool.  Creates a matrix where each element is a count of distinct kmers within a jellyfish hash that have a specific GC count and kmer multiplicity.
  - plot: Plotting tool.  Creates useful plots to visualise kmer distributions.  Requires gnuplot to be available on the system and the binary to be on the PATH environment variable.  The plot tool has a number of submodes:
    - spectra-cn: Shows kmer duplication levels within an assembly by using a kmer comparison matrix generated by comp with kmers from a read dataset and kmers from an assembly.
    - spectra-hist: Plots K-mer spectra from a list of histogram files.
    - density: Shows shared kmer content between two kmer hashes.
    - profile:  Plots a line graph of K-mer coverage across a sequence.


-------------------------------------------------------------------------------------------------------------

Installation:

Generic installation description can be found in the INSTALL file.  Short summary: 

  - Acquire the source code.  Either download and decompress the distributable ("tar -xvf kat-<version>.tar.gz"), or clone the git repository ("git clone git@github.com:TGAC/KAT.git), into a directory on your machine.  
  - "cd" into root directory of the installation
  - Ensure these tools are correctly installed and available on your system:
      - gcc tool chain
      - make
      - jellyfish >= V1.1.10 - http://www.cbcb.umd.edu/software/jellyfish
      - seqan >= V1.4.1 - http://www.seqan.de
      - gnuplot (required for plotting at runtime) - http://www.gnuplot.info
  - For a typical installation on a machine where you have root access type "./configure; make; sudo make install;"
  - To use the plotting functionality you should also have a version of gnuplot installed on your system

The configure script can take several options as arguments.  One commonly modified option is `--prefix', which will install kat to a custom directory.  By default this is "/usr/local", so the kat executable would be found at "/usr/local/bin" by default.  In addition, some options specific to kat are:

  - `--with-seqan' - for specifying a custom seqan directory
  - `--with-boost' - for specifying a custom boost directory (boost is only required for unit testing)
  - `--with-doxygen' - for specifying a custom doxygen directory (doxygen is only required for generating code documention.

Type "./configure --help" for full details.

The Makefile for kat can take several goals.  Full details of common make goals can be found in the INSTALL file.  Typically, the following options can optionally used by kat:

  - "make check" - runs unit tests.  Requires boost to be installed and available.
  - "make dist" - packages the installation into a tarballed distributable.
  - "make distcheck" - runs some sanity tests to ensure the tarballed distributable is likely to work.


-------------------------------------------------------------------------------------------------------------

Operating Instructions:

After KAT has been installed, the following tools should be available:

  "kat" - a single executable binary file that contains a number of subtools.
  "kat_comp_reads.sh" - a bash script demonstrating a simple pipeline to compare the K-mers in two read files

Running "kat --help" will bring up a list of available tools within kat.  To get help on any of these subtools simple type: "kat <tool> --help".  For example: "kat sect --help"; will show details on how to use the sequence coverage estimator tool.

Some dependencies must be dynamically linked to "kat" at runtime.  Specifically, the jellyfish shared library must be available at runtime.  In addition, in order to use the plotting tools it is necessary for "gnuplot" to be available on the PATH.


------------------------------------------------------------------------------------------------------------

Extending KAT:

Developers can extend KAT by adding additional tools, whilst leveraging some of the shared resources that KAT and Jellyfish have made available.  In order to add an additional tool to KAT, developers will need a reasonable working knowledge of C++ programming and have GNU auto tools available on their system.  The process for adding a new subtool is as follows:

1. Create a new directory with the tools name in the "src" directory
2. Copy the template _args.hpp file into this directory and rename to whatever you wish.  Modify the template file so that it contains details of how to use your tool.  Comments have been added to the template to indicate places where you will have to add your custom code. The args template file makes use of getopt.h so developers familiar with this library should have no issues here.  For those unfamiliar with this library, please read the getopt documentation: http://www.gnu.org/software/libc/manual/html_node/Getopt.html
3. Copy the template _main.cc and _main.hpp files into the new directory and write whatever code is necessary for your tool.
4. Add an include and extend the validMode method in "src/kat.cc" so that your tool is recognised.  Also add your tool to the longDescription method.
5. Update the "src/kat_args.hpp" to extend the kat help messages.
6. Update the Makefile.am file to include your _main.cc file.
7. Run "aclocal; autoconf; automake" to generate the actual configure script and initial Makefiles.
8. Run "./configure", with any appropriate options, to make the final Makefiles.
9. Run "make" to compile the new version of KAT with your tools included.  The KAT binary will be available in the "./bin" directory.
10. Run "sudo make install" to install the software.

See INSTALL file for more details on configuring steps 8-10.

There are some shared resources available which might aid the generation of a subtool.  It is worth browsing the ./src/inc directory to see what is available.  There are libraries for:

- Easing generation of gnuplot commands.  Code was taken and modified from: http://ndevilla.free.fr/gnuplot/
- "jellyfish_helper.hpp" provides some convienient functionality for loading an managing jellyfish hashes from a simple file path.
- Sparse Matrix implementation.  In order to avoid loading heavy dependencies such as boost a simple sparse
  matrix implementation has been added to store matricies in a relatively memory efficient way.  The code was
  originally taken from: http://www.cplusplus.com/forum/general/8352/ and modified for use in KAT.  If more
  functionality is required than is available here, either extend this class or use a dedicated matrix
  library.

If you think your subtool is useful and want it available in the official KAT release then please contact daniel.mapleson@tgac.ac.uk or bernardo.clavijo@tgac.ac.uk for discussions on how to harmonise the code.  The job will be easier if you maintain a branch from a cloned KAT repository.


-------------------------------------------------------------------------------------------------------------

Licensing:

GNU GPL V3.  See COPYING file for more details.


-------------------------------------------------------------------------------------------------------------


Authors:

Daniel Mapleson
Bernardo Clavijo
Sarah Ayling
Mario Caccamo

See AUTHORS file for more details.


-------------------------------------------------------------------------------------------------------------


Acknowledgements:

Affiliation: The Genome Analysis Centre (TGAC)
Funding: The Biotechnology and Biological Sciences Research Council (BBSRC)
